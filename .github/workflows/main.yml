name: BioVerse CI/CD Pipeline - Revolutionary Healthcare Platform

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - production

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

jobs:
  # ------------------------------------------------------------------------------
  # Security and Quality Checks
  # ------------------------------------------------------------------------------
  
  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # ------------------------------------------------------------------------------
  # Client Application Pipeline
  # ------------------------------------------------------------------------------
  
  client-pipeline:
    name: üåê Client Pipeline
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./client
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: './client/package-lock.json'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Security audit
      run: npm audit --audit-level=high
      continue-on-error: true
      
    - name: Lint code
      run: npm run lint
      
    - name: Type check
      run: npm run type-check
      continue-on-error: true
      
    - name: Run tests
      run: npm run test:ci
      continue-on-error: true
      
    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: client-build-${{ matrix.node-version }}
        path: ./client/dist
        retention-days: 7

  # ------------------------------------------------------------------------------
  # Server Application Pipeline
  # ------------------------------------------------------------------------------
  
  server-pipeline:
    name: üöÄ Server Pipeline
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./server
    strategy:
      matrix:
        node-version: [18, 20]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: bioverse_test_user
          POSTGRES_PASSWORD: bioverse_test_password
          POSTGRES_DB: bioverse_test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: './server/package-lock.json'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Security audit
      run: npm audit --audit-level=high
      
    - name: Lint code
      run: npm run lint
      
    - name: Type check
      run: npm run type-check
      continue-on-error: true
      
    - name: Run database migrations
      run: npm run migrate
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: bioverse_test_user
        DB_PASSWORD: bioverse_test_password
        DB_NAME: bioverse_test_db
        
    - name: Run tests
      run: npm run test:ci
      env:
        NODE_ENV: test
        PGUSER: bioverse_test_user
        PGHOST: localhost
        PGDATABASE_TEST: bioverse_test_db
        PGPASSWORD: bioverse_test_password
        PGPORT: 5432
        REDIS_URL: redis://localhost:6379
        
    - name: Generate test coverage
      run: npm run test:coverage
      continue-on-error: true
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./server/coverage/lcov.info
        flags: server
        name: server-coverage
        
    - name: Build application
      run: npm run build

  # ------------------------------------------------------------------------------
  # Python AI Pipeline
  # ------------------------------------------------------------------------------
  
  python-ai-pipeline:
    name: üß† AI Pipeline
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./python-ai
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        
    - name: Install test/dev dependencies only (avoid heavy ML libs in CI)
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        
    - name: Security audit
      run: |
        pip-audit
        bandit -r . -f json -o bandit-report.json
      continue-on-error: true
      
    - name: Lint code
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check .
        isort --check-only .
        
    - name: Type check
      run: mypy .
      continue-on-error: true
      
    - name: Run tests
      run: |
        pytest --cov=. --cov-report=xml --cov-report=html
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./python-ai/coverage.xml
        flags: python-ai
        name: ai-coverage

  # ------------------------------------------------------------------------------
  # Mobile App Pipeline
  # ------------------------------------------------------------------------------
  
  mobile-pipeline:
    name: üì± Mobile Pipeline
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./bioverse-mobile
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: './bioverse-mobile/package-lock.json'
        
    - name: Setup Expo CLI
      run: npm install -g @expo/cli
      
    - name: Install dependencies
      run: npm ci
      
    - name: Security audit
      run: npm audit --audit-level=high
      
    - name: Lint code
      run: npx expo lint
      continue-on-error: true
      
    - name: Type check
      run: npx tsc --noEmit
      continue-on-error: true
      
    - name: Build for web
      run: npx expo export --platform web
      
    - name: Upload mobile build
      uses: actions/upload-artifact@v4
      with:
        name: mobile-web-build
        path: ./bioverse-mobile/dist
        retention-days: 7

  # ------------------------------------------------------------------------------
  # Infrastructure Validation
  # ------------------------------------------------------------------------------
  
  terraform-validate:
    name: üèóÔ∏è Infrastructure Validation
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0
        
    - name: Terraform Format Check
      run: terraform fmt -check -recursive
      
    - name: Terraform Init
      run: terraform init -backend=false
      
    - name: Terraform Validate
      run: terraform validate
      
    - name: Run tfsec security scan
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        working_directory: ./terraform

  # ------------------------------------------------------------------------------
  # Docker Build and Push
  # ------------------------------------------------------------------------------
  
  docker-build:
    name: üê≥ Docker Build & Push
    runs-on: ubuntu-latest
    needs: [client-pipeline, server-pipeline, python-ai-pipeline]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service: [client, server, python-ai]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Build, tag, and push image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: bioverse-${{ matrix.service }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./${{ matrix.service }}
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  # ------------------------------------------------------------------------------
  # Deploy to Development
  # ------------------------------------------------------------------------------
  
  deploy-dev:
    name: üöÄ Deploy to Development
    runs-on: ubuntu-latest
    needs: [docker-build, terraform-validate]
    if: github.ref == 'refs/heads/develop'
    environment: development
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Deploy to ECS
      run: |
        aws ecs update-service \
          --cluster bioverse-cluster-dev \
          --service bioverse-api-dev \
          --force-new-deployment
          
        aws ecs update-service \
          --cluster bioverse-cluster-dev \
          --service bioverse-web-dev \
          --force-new-deployment
          
        aws ecs update-service \
          --cluster bioverse-cluster-dev \
          --service bioverse-ai-dev \
          --force-new-deployment

  # ------------------------------------------------------------------------------
  # Deploy to Production
  # ------------------------------------------------------------------------------
  
  deploy-production:
    name: üåü Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build, terraform-validate]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Deploy to ECS with Blue/Green
      run: |
        # Update services with new task definitions
        aws ecs update-service \
          --cluster bioverse-cluster-production \
          --service bioverse-api-production \
          --force-new-deployment \
          --deployment-configuration "maximumPercent=200,minimumHealthyPercent=50"
          
        aws ecs update-service \
          --cluster bioverse-cluster-production \
          --service bioverse-web-production \
          --force-new-deployment \
          --deployment-configuration "maximumPercent=200,minimumHealthyPercent=50"
          
        aws ecs update-service \
          --cluster bioverse-cluster-production \
          --service bioverse-ai-production \
          --force-new-deployment \
          --deployment-configuration "maximumPercent=200,minimumHealthyPercent=50"
        
    - name: Wait for deployment to complete
      run: |
        aws ecs wait services-stable \
          --cluster bioverse-cluster-production \
          --services bioverse-api-production bioverse-web-production bioverse-ai-production
          
    - name: Run smoke tests
      run: |
        # Add your smoke tests here
        curl -f https://api.bioverse.com/health || exit 1
        curl -f https://bioverse.com || exit 1

  # ------------------------------------------------------------------------------
  # Notification
  # ------------------------------------------------------------------------------
  
  notify:
    name: üì¢ Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#bioverse-deployments'
        text: |
          üöÄ BioVerse Deployment Complete!
          
          Status: ${{ job.status }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
          
          The future of healthcare is live! üåç
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: always()