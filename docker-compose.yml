# BioVerse Full Stack Docker Compose
# Containerized deployment for Python AI backend with Node.js and React

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: bioverse-postgres
    environment:
      POSTGRES_DB: bioverse_zambia_db
      POSTGRES_USER: bioverse_admin
      POSTGRES_PASSWORD: 2002Fred??
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/database_updates.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - bioverse-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bioverse_admin -d bioverse_zambia_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: bioverse-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - bioverse-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Python AI Backend
  python-ai:
    build:
      context: ./python-ai
      dockerfile: Dockerfile
    container_name: bioverse-python-ai
    environment:
      - PYTHON_AI_PORT=8000
      - PYTHON_AI_HOST=0.0.0.0
      - ENVIRONMENT=production
      - DEBUG=false
      - DATABASE_URL=postgresql://bioverse_admin:2002Fred??@postgres:5432/bioverse_zambia_db
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=bioverse_zambia_db
      - DB_USER=bioverse_admin
      - DB_PASSWORD=2002Fred??
      - NODE_SERVER_URL=http://node-server:3000
      - NODE_SERVER_API_KEY=bioverse-ai-key
      - OLLAMA_BASE_URL=http://host.docker.internal:11434
      - OLLAMA_MODEL=deepseek-r1:1.5b
      - ENABLE_OLLAMA=true
      - REDIS_URL=redis://redis:6379
      - ENABLE_REDIS_CACHE=true
      - LOG_LEVEL=INFO
      - WORKER_PROCESSES=2
    ports:
      - "8000:8000"
    volumes:
      - ./python-ai/models:/app/models
      - ./python-ai/data:/app/data
      - ./logs:/app/logs
    networks:
      - bioverse-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Node.js API Server
  node-server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: bioverse-node-server
    environment:
      - PORT=3000
      - NODE_ENV=production
      - CORS_ORIGIN=http://localhost:5173
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=bioverse_zambia_db
      - DB_USER=bioverse_admin
      - DB_PASSWORD=2002Fred??
      - JWT_SECRET=supersecretjwtkey
      - JWT_EXPIRY=24h
      - PYTHON_AI_URL=http://python-ai:8000
      - PYTHON_AI_API_KEY=bioverse-ai-key
      - PYTHON_AI_TIMEOUT=30000
      - PYTHON_AI_RETRY_ATTEMPTS=3
      - ENABLE_PYTHON_AI=true
      - OLLAMA_BASE_URL=http://host.docker.internal:11434
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=info
    ports:
      - "3000:3000"
    volumes:
      - ./logs:/app/logs
      - ./server/bioverse.db:/app/bioverse.db
    networks:
      - bioverse-network
    depends_on:
      postgres:
        condition: service_healthy
      python-ai:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  bioverse-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16