# BioVerse Complete Production Stack Docker Compose
# Full containerized deployment with NGINX, Firebase, PostgreSQL, Redis, AI Backend, and Node.js API

version: "3.8"

services:
  # NGINX Reverse Proxy & Load Balancer
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: bioverse-nginx
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080" # Health check port
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/error-pages:/usr/share/nginx/html/errors:ro
      - nginx_logs:/var/log/nginx
      - ssl_certs:/etc/ssl/certs
      - ssl_private:/etc/ssl/private
    networks:
      - bioverse-network
    depends_on:
      - client
      - node-server
      - python-ai
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # React Frontend Client
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
      target: production
    container_name: bioverse-client
    environment:
      NODE_ENV: production
      VITE_API_URL: "${VITE_API_URL:-https://api.bioverse.local}"
      VITE_FIREBASE_API_KEY: ${VITE_FIREBASE_API_KEY}
      VITE_FIREBASE_AUTH_DOMAIN: ${VITE_FIREBASE_AUTH_DOMAIN}
      VITE_FIREBASE_PROJECT_ID: ${VITE_FIREBASE_PROJECT_ID}
      VITE_FIREBASE_STORAGE_BUCKET: ${VITE_FIREBASE_STORAGE_BUCKET}
      VITE_FIREBASE_MESSAGING_SENDER_ID: ${VITE_FIREBASE_MESSAGING_SENDER_ID}
      VITE_FIREBASE_APP_ID: ${VITE_FIREBASE_APP_ID}
    ports:
      - "5173:5173"
    networks:
      - bioverse-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: bioverse-postgres
    environment:
      POSTGRES_DB: "${POSTGRES_DB:-bioverse_zambia_db}"
      POSTGRES_USER: "${POSTGRES_USER:-bioverse_admin}"
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/database_updates.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./server/create_health_twins.sql:/docker-entrypoint-initdb.d/02-health-twins.sql
      - ./server/health_twins_data.sql:/docker-entrypoint-initdb.d/03-sample-data.sql
      - postgres_backups:/backups
    networks:
      - bioverse-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-bioverse_admin} -d ${POSTGRES_DB:-bioverse_zambia_db}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: bioverse_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - bioverse-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Apache Cassandra for billion-scale health data
  cassandra:
    image: cassandra:4.1
    container_name: bioverse_cassandra
    ports:
      - "9042:9042"  # CQL port
      - "9160:9160"  # Thrift port
      - "7199:7199"  # JMX port
    environment:
      - CASSANDRA_CLUSTER_NAME=BioVerse_Health_Cluster
      - CASSANDRA_DC=zambia_dc
      - CASSANDRA_RACK=rack1
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
      - CASSANDRA_NUM_TOKENS=256
      - MAX_HEAP_SIZE=512M
      - HEAP_NEWSIZE=100M
    volumes:
      - cassandra_data:/var/lib/cassandra
      - ./server/src/config:/docker-entrypoint-initdb.d
    networks:
      - bioverse-network
    healthcheck:
      test: ["CMD-SHELL", "cqlsh -e 'SELECT now() FROM system.local;'"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Python AI Backend
  python-ai:
    build:
      context: ./python-ai
      dockerfile: Dockerfile
      target: production
    container_name: bioverse-python-ai
    environment:
      PYTHON_AI_PORT: 8000
      PYTHON_AI_HOST: 0.0.0.0
      ENVIRONMENT: production
      DEBUG: "false"
      DATABASE_URL: ${PYTHON_DATABASE_URL}
      DB_HOST: "${DB_HOST:-postgres}"
      DB_PORT: "${DB_PORT:-5432}"
      DB_NAME: "${DB_NAME:-bioverse_zambia_db}"
      DB_USER: "${DB_USER:-bioverse_admin}"
      DB_PASSWORD: ${DB_PASSWORD}
      NODE_SERVER_URL: http://node-server:3000
      NODE_SERVER_API_KEY: ${PYTHON_AI_API_KEY}
      AI_MODEL: "gemma3:270m"
      AI_MODEL_TYPE: "gemma"
      AI_PROVIDER: "huggingface"
      AI_MODEL_SIZE: "270m"
      ENABLE_LOCAL_AI: "true"
      REDIS_URL: redis://redis:6379
      REDIS_DB: 0
      ENABLE_REDIS_CACHE: "true"
      LOG_LEVEL: INFO
      WORKER_PROCESSES: "4"
      MAX_WORKERS: "8"
      TIMEOUT: "120"
      KEEP_ALIVE: "60"
      # Firebase Configuration
      FIREBASE_PROJECT_ID: ${FIREBASE_PROJECT_ID}
      GOOGLE_APPLICATION_CREDENTIALS: /app/config/firebase-admin.json
      # Security
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      # Monitoring
      ENABLE_METRICS: "true"
      METRICS_PORT: "9090"
    ports:
      - "8000:8000"
      - "9090:9090" # Metrics port
    volumes:
      - ./python-ai/models:/app/models
      - ./python-ai/data:/app/data
      - ./logs:/app/logs
      - ./firebase/firebase-admin.json:/app/config/firebase-admin.json:ro
      - ai_cache:/app/cache
    networks:
      - bioverse-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s

  # Node.js API Server
  node-server:
    build:
      context: ./server
      dockerfile: Dockerfile
      target: production
    container_name: bioverse-node-server
    environment:
      PORT: 3000
      NODE_ENV: production
      CORS_ORIGIN: "${CORS_ORIGIN:-https://bioverse.local,https://www.bioverse.local}"
      # Database Configuration
      DB_HOST: "${DB_HOST:-postgres}"
      DB_PORT: "${DB_PORT:-5432}"
      DB_NAME: "${DB_NAME:-bioverse_zambia_db}"
      DB_USER: "${DB_USER:-bioverse_admin}"
      DB_PASSWORD: ${DB_PASSWORD}
      DB_SSL: "false"
      DB_POOL_MIN: "2"
      DB_POOL_MAX: "20"
      # JWT Configuration
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRY: 24h
      JWT_REFRESH_EXPIRY: 7d
      # Python AI Integration
      PYTHON_AI_URL: "${PYTHON_AI_URL:-http://python-ai:8000}"
      PYTHON_AI_API_KEY: ${PYTHON_AI_API_KEY}
      PYTHON_AI_TIMEOUT: "60000"
      PYTHON_AI_RETRY_ATTEMPTS: "3"
      ENABLE_PYTHON_AI: "true"
      # AI Model Configuration
      AI_MODEL: "gemma3:270m"
      AI_MODEL_TYPE: "gemma"
      AI_PROVIDER: "huggingface"
      # Redis Configuration
      REDIS_URL: redis://redis:6379
      REDIS_DB: 1
      REDIS_SESSION_DB: 2
      # Firebase Configuration
      FIREBASE_PROJECT_ID: ${FIREBASE_PROJECT_ID}
      GOOGLE_APPLICATION_CREDENTIALS: /app/config/firebase-admin.json
      # Security
      BCRYPT_ROUNDS: "12"
      RATE_LIMIT_WINDOW_MS: "900000" # 15 minutes
      RATE_LIMIT_MAX: "100"
      # File Upload
      UPLOAD_MAX_SIZE: "50mb"
      UPLOAD_ALLOWED_TYPES: "image/jpeg,image/png,image/gif,application/pdf"
      # Logging
      LOG_LEVEL: info
      LOG_FORMAT: combined
      # WebSocket
      ENABLE_WEBSOCKETS: "true"
      WS_ORIGINS: "${WS_ORIGINS:-https://bioverse.local,https://www.bioverse.local}"
      # Monitoring
      ENABLE_METRICS: "true"
      METRICS_PORT: "9091"
    ports:
      - "3000:3000"
      - "9091:9091" # Metrics port
    volumes:
      - ./logs:/app/logs
      - ./server/uploads:/app/uploads
      - ./firebase/firebase-admin.json:/app/config/firebase-admin.json:ro
      - node_cache:/app/cache
    networks:
      - bioverse-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      python-ai:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: bioverse-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - bioverse-network
    depends_on:
      - node-server
      - python-ai
    restart: unless-stopped
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: bioverse-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-bioverse2024}
      GF_USERS_ALLOW_SIGN_UP: "false"
    networks:
      - bioverse-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: bioverse-backup
    environment:
      PGHOST: postgres
      PGDATABASE: "${POSTGRES_DB:-bioverse_zambia_db}"
      PGUSER: "${POSTGRES_USER:-bioverse_admin}"
      PGPASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - bioverse-network
    depends_on:
      - postgres
    restart: "no"
    entrypoint: ["/backup.sh"]

  # Log Aggregation (ELK Stack alternative - Fluent Bit)
  fluent-bit:
    image: fluent/fluent-bit:latest
    container_name: bioverse-fluent-bit
    volumes:
      - ./monitoring/fluent-bit/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
      - nginx_logs:/var/log/nginx:ro
      - ./logs:/var/log/app:ro
    networks:
      - bioverse-network
    depends_on:
      - nginx
      - node-server
      - python-ai
    restart: unless-stopped

  # Ollama AI Service
  ollama:
    image: ollama/ollama:latest
    container_name: bioverse-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - bioverse-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
    environment:
      OLLAMA_HOST: "0.0.0.0"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Health Check Service
  healthcheck:
    build:
      context: ./monitoring/healthcheck
      dockerfile: Dockerfile
    container_name: bioverse-healthcheck
    environment:
      CHECK_INTERVAL: "60"
      SERVICES: "nginx:80,node-server:3000,python-ai:8000,postgres:5432,redis:6379"
      WEBHOOK_URL: ${HEALTHCHECK_WEBHOOK_URL}
    networks:
      - bioverse-network
    depends_on:
      - nginx
      - node-server
      - python-ai
      - postgres
      - redis
    restart: unless-stopped

  # SSL Certificate Management (Let's Encrypt)
  certbot:
    image: certbot/certbot
    container_name: bioverse-certbot
    volumes:
      - ssl_certs:/etc/letsencrypt
      - ssl_private:/etc/ssl/private
      - ./nginx/webroot:/var/www/certbot
    networks:
      - bioverse-network
    restart: "no"
    command: certonly --webroot --webroot-path=/var/www/certbot --email ${SSL_EMAIL} --agree-tos --no-eff-email -d bioverse.local -d api.bioverse.local -d admin.bioverse.local

volumes:
  postgres_data:
    driver: local
  postgres_backups:
    driver: local
  redis_data:
    driver: local
  cassandra_data:
    driver: local
  nginx_logs:
    driver: local
  ssl_certs:
    driver: local
  ssl_private:
    driver: local
  ai_cache:
    driver: local
  node_cache:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  ollama_data:
    driver: local

networks:
  bioverse-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    driver_opts:
      com.docker.network.enable_ipv6: "false"
      com.docker.network.bridge.name: bioverse0
